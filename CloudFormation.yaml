Parameters:
  EnvType:
    Description: Environment type.
    Default: dev
    Type: String
    AllowedValues:
      - prod
      - dev
    ConstraintDescription: must specify prod, dev, test, or staging.

Resources:
  AppNode:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0309ea2b0f3e48ca7
      KeyName: dev-cc
      SecurityGroups:
        - !Ref AppNodeSG
      IamInstanceProfile: !Ref EC2CCProfile
      UserData: !Base64 |
        #cloud-boothook
        #!/bin/bash -xe
        echo "hello "
        exec > /etc/setup_log.txt 2> /etc/setup_err.txt
        sleep 5s
        echo "User_Data starts"
        varaible = !Ref EnvType
        rm -rf /home/ubuntu/prime_cc
        mkdir /home/ubuntu/prime_cc
        key=`aws s3 ls s3://onelink-cc-deployment-dev/Prime-CC-pipeline/MyApp/ --recursive | sort | tail -n 1 | awk '{print $4}'`
        aws s3 cp s3://onelink-cc-deployment-dev/$key /home/ubuntu/prime_cc/
        cd /home/ubuntu/prime_cc
        zipname="$(cut -d'/' -f3 <<<"$key")"
        echo $zipname
        mv /home/ubuntu/prime_cc/$zipname /home/ubuntu/prime_cc/cc.zip
        unzip -o /home/ubuntu/prime_cc/cc.zip -d /home/ubuntu/prime_cc/
        echo $?
        python3 -m venv venv
        venv/bin/pip3 install -e .
        rm -rf cc.zip
        aws configure set default.region us-east-1
        venv/bin/pserve production.ini http_port=5000 &
  AppNodeSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for the app nodes that allow ssh, http and docker ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '5000'
        ToPort: '5000'
        CidrIp: 0.0.0.0/0
  EC2CCProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref EC2PrimeCCRole
  EC2PrimeCCRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: primeCC-ec2-role-dev
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonCognitoPowerUser"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AWSIoTFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
